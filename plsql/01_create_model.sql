-- Reto 1: Creación del modelo de datos (Tablas principales)
-- Definimos tablas: usuarios, comerciantes, establecimientos con sus columnas y restricciones.

-- Tabla de usuarios del sistema
CREATE TABLE usuarios (
    id_usuario       NUMBER GENERATED BY DEFAULT AS IDENTITY,       -- Identificador único auto-incremental (PK)
    nombre           VARCHAR2(100)    NOT NULL,                     -- Nombre completo del usuario
    correo_electronico VARCHAR2(150)  NOT NULL,                     -- Correo electrónico (debe ser único)
    contrasena       VARCHAR2(100)    NOT NULL,                     -- Contraseña (idealmente almacenada cifrada/hasheada, no en texto plano)
    rol              VARCHAR2(30)     NOT NULL,                     -- Rol del usuario (Administrador o Auxiliar)
    CONSTRAINT pk_usuarios PRIMARY KEY (id_usuario),                -- Clave primaria sobre id_usuario
    CONSTRAINT uq_usuarios_email UNIQUE (correo_electronico),       -- Correo electrónico único en esta tabla
    CONSTRAINT ck_usuarios_rol CHECK (rol IN ('Administrador','Auxiliar'))  -- Solo se permiten roles válidos
);

-- Tabla de comerciantes (proveedores o clientes comerciales)
CREATE TABLE comerciantes (
    id_comerciante      NUMBER GENERATED BY DEFAULT AS IDENTITY,    -- Identificador único auto-incremental (PK)
    nombre_razon_social VARCHAR2(150) NOT NULL,                     -- Nombre o razón social del comerciante
    municipio           VARCHAR2(100) NOT NULL,                     -- Municipio (ciudad) del comerciante
    telefono            VARCHAR2(20),                               -- Teléfono de contacto (puede ser NULL si no aplica)
    correo_electronico  VARCHAR2(150),                              -- Correo electrónico de contacto (opcional)
    fecha_registro      DATE         DEFAULT SYSDATE    NOT NULL,   -- Fecha de registro (por defecto, fecha actual)
    estado              VARCHAR2(10) NOT NULL,                      -- Estado del comerciante (Activo/Inactivo)
    fecha_actualizacion DATE,                                       -- Fecha de última actualización (se llenará vía trigger)
    usuario_actualizacion VARCHAR2(100),                            -- Usuario que realizó la última actualización (vía trigger)
    CONSTRAINT pk_comerciantes PRIMARY KEY (id_comerciante),        -- Clave primaria 
    CONSTRAINT ck_comerciantes_estado CHECK (estado IN ('Activo','Inactivo'))  -- Estado debe ser 'Activo' o 'Inactivo'
    -- Nota: Se podría agregar CONSTRAINT UNIQUE al correo_electronico si se requiere que no se repita entre comerciantes.
);

-- Tabla de establecimientos asociados a comerciantes
CREATE TABLE establecimientos (
    id_establecimiento  NUMBER GENERATED BY DEFAULT AS IDENTITY,    -- Identificador único auto-incremental (PK)
    nombre              VARCHAR2(150)  NOT NULL,                    -- Nombre del establecimiento (sucursal, tienda, etc.)
    ingresos            NUMBER(12,2)   DEFAULT 0       NOT NULL,    -- Monto de ingresos (valor por defecto 0)
    numero_empleados    NUMBER         DEFAULT 0       NOT NULL,    -- Cantidad de empleados (valor por defecto 0)
    id_comerciante      NUMBER         NOT NULL,                    -- Referencia al comerciante propietario (FK a comerciantes)
    fecha_actualizacion DATE,                                       -- Fecha última actualización (vía trigger)
    usuario_actualizacion VARCHAR2(100),                            -- Usuario de última actualización (vía trigger)
    CONSTRAINT pk_establecimientos PRIMARY KEY (id_establecimiento),            -- Clave primaria 
    CONSTRAINT fk_establecimiento_comerciante FOREIGN KEY (id_comerciante) REFERENCES comerciantes(id_comerciante)  -- Clave foránea a comerciantes
    -- Nota: Es recomendable crear un índice en id_comerciante para optimizar las consultas de join y borrados en cascada.
);


-- Tabla de municipios para lista de valores (Reto 6)
CREATE TABLE municipios (
    id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre           VARCHAR2(100) NOT NULL,
    codigo_dane      VARCHAR2(10)  -- Código oficial opcional
);



